% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_adjacency.R
\name{create_adjacency}
\alias{create_adjacency}
\alias{create_edges}
\title{Create an adjacency matrix, or convert one to an edgelist}
\usage{
create_adjacency(data, n1, n2, value = NULL, diagonal = NULL)

create_edges(adjmat, zeroEdges = FALSE, symmetric = FALSE, diag = FALSE)
}
\arguments{
\item{data}{A data frame containing the nodes.}

\item{n1}{column representing the first set of nodes.}

\item{n2}{column representing the second set of nodes.}

\item{value}{column representing the weight (otherwise will be set to 1).}

\item{diagonal}{numeric value desired for the diagonal (defaults to a value of 1).}

\item{adjmat}{A matrix like that produced with \code{create_adjacency}}

\item{zeroEdges}{Include all possible edges or only those with values > 0?}

\item{symmetric}{Include both A -> B and B -> A? FALSE assumes an undirected graph.}

\item{diag}{Include diagonal (i.e. self connections)?}
}
\value{
A symmetric adjacency matrix with rows and columns pertaining to the
  unique values found in n1 and n2
}
\description{
Creates a symmetric adjacency matrix from a simple data frame or
  edgelist from a matrix object that notes the connections.
}
\details{
The idea is to have this functionality without requiring any special
  graph or network object, as typical graphs can be represented rather simply
  using a data frame. n1 and n2 specify columns where the nodes in n1 are
  connected to nodes in n2. Value is an optional column name that will
  specify the weight of the connection See get.adjacency in igraph for an
  alternative.

  \code{create_edges} assumes an adjacency matrix like that produced by \code{create_adjacency}
}
\examples{
library(lazerhawk); library(dplyr)
nodeData = data.frame(pair=1:10,
node1 = sample(letters[1:4], 10, replace=TRUE),
                      node2 = sample(LETTERS[1:4], 10, replace=TRUE),
                      weight = runif(10),
                      diagonal = 0)
adjmat = create_adjacency(nodeData, n1='node1', n2='node2')
adjmat
adjmat = create_adjacency(nodeData, n1='node1', n2='node2', value='weight', diagonal=0)
adjmat

create_edges(adjmat)
create_edges(adjmat, symmetric=TRUE)
}
